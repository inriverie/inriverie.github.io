@if $use-forms == true{
/*------------------------------------*\
    FORMS > FORMS
\*------------------------------------*/
/**
 * Rest margin
 */
form{ margin:0; }


/*
 * Define consistent border, margin, and padding.
 */
fieldset{
    border: 0;
    margin: 0;
    padding:$base-spacing-unit;
}


/*
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend{
    border: 0; /* [1] */
    padding:0; /* [2] */
}


/**
 * Labels
 *
 * Give labels some cursor interactions...
 */
label{
    cursor:pointer;


    /*
     *
     * Define a `.label` class as well as a `label` element. This means we can apply
     * label-like styling to meta-labels for groups of options where a `label`
     * element is not suitable, e.g.:
     *
       <fieldset>
         <legend class=label>Select an option below:</legend>
         <ul class="multi-list  four-cols">
           <li>
             <input /> <label />
           </li>
           <li>
             <input /> <label />
           </li>
           <li>
             <input /> <label />
           </li>
           <li>
             <input /> <label />
           </li>
         </ul>
       </fieldset>
     *
     */
    &,.label{
        display:    block;
        line-height:$line-height-ratio;


        /**
         * Extra help text in `label`s, e.g.:
         *
           <label>Card number <small class=additional>No spaces</small></label>
         *
         */
        .additional{
            font-weight:normal;
        }
    }
}


/**
 * Text inputs
 *
 * Instead of a `[type]` selector for each kind of form input, we just use a
 * class to target any/every one, e.g.:
   <input type=text class=input--txt>
   <input type=email class=input--txt>
   <input type=password class=input--txt>
   <textarea class=input--txt>
 *
 */
.input--txt{}


/*
 * 1. Remove excess padding in IE 8/9.
 */
input[type="checkbox"],
input[type="radio"] {
    margin-right: 0.25em;

    @if legacy-support == true{
        padding:  0; /* [1] */
    }
}


/**
 * 1. Prevents Webkit from locking `font-size`.
 *
 * Put `select` icon back with dropdown.svg
 */
select{ -webkit-appearance:button; /* [1] */ }


/**
 * Placeholder text
 *
 * 1. Chrome, Safari
 * 2. Firefox 19
 * 3. IE 10
 */
::-webkit-input-placeholder{} /* [1] */
         ::-moz-placeholder{} /* [2] */
     :-ms-input-placeholder{} /* [3] */

:focus::-webkit-input-placeholder{}
         :focus::-moz-placeholder{}
     :focus:-ms-input-placeholder{}


/**
 * Group sets of form fields in a `div`, e.g.:
 *
   <fieldset>
     <div class=form-field>
       <label />
       <input class=input />
     </div>
     <div class=form-field>
       <label />
       <select />
     </div>
     <div class=form-field>
       <label />
       <input class=input />
     </div>
   </fieldset>
 *
 */
.form-field{
    @extend %sass-margin-bottom;


    &:last-child{ margin-bottom:0; }
}


/*
 * Groups of checkboxes and radios, e.g.:
 *
   <ul class=check-list>
     <li>
       <input /> <label />
     </li>
     <li>
       <input /> <label />
     </li>
   </ul>
 *
 */
.check-list{
    list-style: none;
    margin:     0;
}

/*
 * Labels in check-lists
 */
.check-label,
.check-list label,
.check-list .label{
    display:inline-block;
}


@if $spoken-word == true{
    /**
     * Spoken forms are for forms that read like spoken word, e.g.:
     *
       <p class=spoken-form>
           Hello, my <label for=spoken-name>name</label> is
           <input type=text class=text-input id=spoken-name>. My home
           <label for=country>country</label> is
           <select id=country>
               <option>UK</option>
               <option>US</option>
               <option>Other</option>
           </select>
       </p>
     *
     */
    .spoken-form label{
        display:inline-block;
        font:   inherit;
    }
}
/* endif */


@if $input-captions == true{
    /**
     * Extra help text displayed after a field when that field is in focus, e.g.:
     *
       <label for=email>Email:</label>
       <input type=email class=text-input id=email>
       <small class=extra-help>.edu emails only</small>
     *
     * We leave the help text in the document flow and merely set it to
     * `visibility:hidden;`. This means that it wonâ€™t interfere with anything once
     * it reappears.
     *
     */
    /*small*/.extra-help{
        display:    inline-block;
        visibility: hidden;
    }
    .input--txt:active + .extra-help,
    .input--txt:focus + .extra-help{
        
    }
}
/* endif */
}
/* endif */
