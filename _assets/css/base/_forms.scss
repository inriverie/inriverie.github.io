/*------------------------------------*\
    $FORMS
\*------------------------------------*/
/**
 * Text inputs
 *
 * Instead of a `[type]` selector for each kind of form input, we just use a
 * class to target any/every one, e.g.:
   <input type=text class=input>
   <input type=email class=input>
   <input type=password class=input>
   <textarea class=input>
 *
 */
.input{}


/**
 * Placeholder text
 *
 * 1. Chrome, Safari
 * 2. Firefox 19
 * 3. IE 10
 */
::-webkit-input-placeholder{ color:; } /* [1] */
         ::-moz-placeholder{ color:; } /* [2] */
     :-ms-input-placeholder{ color:; } /* [3] */

:focus::-webkit-input-placeholder{ color:; }
         :focus::-moz-placeholder{ color:; }
     :focus:-ms-input-placeholder{ color:; }


/**
 * Check Validity
 */
:valid{}
:invalid{}


/**
 * Group sets of form fields in a `div`, e.g.:
 *
   <fieldset>
     <div class=form-field>
       <label />
       <input class=input />
     </div>
     <div class=form-field>
       <label />
       <select />
     </div>
     <div class=form-field>
       <label />
       <input class=input />
     </div>
   </fieldset>
 *
 */
.form-field{
  @extend %sass-margin-bottom;


  &:last-child{ margin-bottom:0; }
}


/**
 * Labels
 *
 * Define a `.label` class as well as a `label` element. This means we can apply
 * label-like styling to meta-labels for groups of options where a `label`
 * element is not suitable, e.g.:
 *
   <li>
     <span class=label>Select an option below:</span>
     <ul class="multi-list  four-cols">
       <li>
         <input /> <label />
       </li>
       <li>
         <input /> <label />
       </li>
       <li>
         <input /> <label />
       </li>
       <li>
         <input /> <label />
       </li>
     </ul>
   </li>
 *
 */
label,
.label{
  display:block;


  /**
   * Extra help text in `label`s, e.g.:
   *
     <label>Card number <small class=additional>No spaces</small></label>
   *
   */
  .additional{
    font-weight:normal;
  }
}


/*
 * Groups of checkboxes and radios, e.g.:
 *
   <ul class=check-list>
     <li>
       <input /> <label />
     </li>
     <li>
       <input /> <label />
     </li>
   </ul>
 *
 */
.check-list{
  list-style: none;
  margin:     0;
}
  /*
   * Labels in check-lists
   */
  .check-label,
  .check-list label,
  .check-list .label{
    display:inline-block;
  }


/**
 * Spoken forms are for forms that read like spoken word, e.g.:
 *
   <p class=spoken-form>
       Hello, my <label for=spoken-name>name</label> is
       <input type=text class=text-input id=spoken-name>. My home
       <label for=country>country</label> is
       <select id=country>
           <option>UK</option>
           <option>US</option>
           <option>Other</option>
       </select>
   </p>
 *
 */
.spoken-form label{
  display:inline-block;
  font:   inherit;
}


/**
 * Extra help text displayed after a field when that field is in focus, e.g.:
 *
   <label for=email>Email:</label>
   <input type=email class=text-input id=email>
   <small class=extra-help>.edu emails only</small>
 *
 * We leave the help text in the document flow and merely set it to
 * `visibility:hidden;`. This means that it wonâ€™t interfere with anything once
 * it reappears.
 *
 */
/*small*/.extra-help{
  display:    inline-block;
  visibility: hidden;
}
.input:active + .extra-help,
.input:focus + .extra-help{
  visibility:visible;
}
